Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_X3D_train, function(x) is.numeric(x) )))
feat_X3D_train<- as.data.frame(scale(train%>% dplyr::select(starts_with("X3D"))))
feat_X3D_test<- as.data.frame(scale(test%>% dplyr::select(starts_with("X3D"))))
feat_rest_train<- as.data.frame(scale(train%>% dplyr::select(-starts_with("pixel"),-starts_with("X3D"))))
feat_rest_test<- as.data.frame(scale(test%>% dplyr::select(-starts_with("pixel"),-starts_with("X3D"))))
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_X3D_train, function(x) is.numeric(x) )))
svd_seq<-feat_X3D_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
train<-read.csv("../output/features/Andrei/old/ccs.pipelines.example_pipeline.ChantaPipeline_train_.csv", stringsAsFactors = FALSE)%>%
select(-X)%>%
mutate(id=as.numeric(gsub(".jpg","",image_name)))
test<-read.csv("../output/features/Andrei/old/ccs.pipelines.example_pipeline.ChantaPipeline_test_.csv", stringsAsFactors = FALSE)%>%
select(-X)%>%
mutate(id=as.numeric(gsub(".jpg","",image_name)))
#length(grep("pixel",colnames(train), value=TRUE))
train_index<-train%>% dplyr::select(type_cat,image_name,id)
test_index<-test%>% dplyr::select(image_name,id)
#Remove type_cat
train<-train%>% dplyr::select(-type_cat,-image_name)
test<-test%>% dplyr::select(-image_name)
#Feature segementation for exploration and transformation
feat_pixel_train<- as.data.frame(scale(train%>% dplyr::select(starts_with("pixel"))))
feat_pixel_test<- as.data.frame(test%>% dplyr::select(starts_with("pixel")))
feat_X3D_train<- as.data.frame(scale(train%>% dplyr::select(starts_with("X3D"))))
feat_X3D_test<- as.data.frame(scale(test%>% dplyr::select(starts_with("X3D"))))
feat_rest_train<- as.data.frame(scale(train%>% dplyr::select(-starts_with("pixel"),-starts_with("X3D"))))
feat_rest_test<- as.data.frame(scale(test%>% dplyr::select(-starts_with("pixel"),-starts_with("X3D"))))
#Check near Zero variance features
library(caret)
#NoVar<-nearZeroVar(feat_pixel,saveMetrics= TRUE)
#NoVar<-nearZeroVar(feat_X3D,saveMetrics= TRUE)
nzv0 <- nearZeroVar(feat_rest_train)
feat_rest_train<- feat_rest_train[, -nzv0]
feat_rest_test<- feat_rest_test[, -nzv0]
nzv1 <- nearZeroVar(feat_pixel_train)
#feat_pixel <- feat_pixel[, -nzv1]
nzv2 <- nearZeroVar(feat_X3D_train)
feat_X3D_train <- feat_X3D_train[, -nzv2]
feat_X3D_test <- feat_X3D_test[, -nzv2]
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_pixel_train, function(x) is.numeric(x) )))
set.seed(1234)
num.cols<- sample(num.cols, 100)
svd_seq<-feat_pixel_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_pixel_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_pixel_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~pixel features ")
ggplotly(p)
#Replace features by PCA components
feat_pixel_train_pca<-as.data.frame(pca$x[,1:100])
colnames(feat_pixel_train_pca)<-paste("pca_pixel_",1:100,sep="")
feat_pixel_test_pca<-as.data.frame(predict(pca, newdata=feat_pixel_test[,num.cols])[,1:100])
colnames(feat_pixel_test_pca)<-paste("pca_pixel_",1:100,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_X3D_train, function(x) is.numeric(x) )))
svd_seq<-feat_X3D_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_X3D_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_X3D_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~X3D features ")
ggplotly(p)
#Replace features by PCA components
feat_X3D_train_pca<-as.data.frame(pca$x[,1:10])
colnames(feat_X3D_train_pca)<-paste("pca_X3D_",1:10,sep="")
feat_X3D_test_pca<-as.data.frame(predict(pca, newdata=feat_X3D_test[,num.cols])[,1:10])
colnames(feat_X3D_test_pca)<-paste("pca_X3D_",1:10,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_rest_train, function(x) is.numeric(x) )))
svd_seq<-feat_rest_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_rest_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_rest_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~X3D features ")
ggplotly(p)
#Replace features by PCA components
feat_rest_train_pca<-as.data.frame(pca$x[,1:12])
colnames(feat_rest_train_pca)<-paste("pca_rest_",1:12,sep="")
feat_rest_test_pca<-as.data.frame(predict(pca, newdata=feat_rest_test[,num.cols])[,1:12])
colnames(feat_rest_train_pca)<-paste("pca_rest_",1:12,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
test_corr<-cbind(feat_X3D_train, feat_X3D_train_pca)
svd_seq<-feat_rest_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
train2<-cbind(train_index,feat_rest_train_pca, feat_X3D_train, feat_X3D_train_pca,  feat_pixel_train_pca)
test2<-cbind(test_index,feat_rest_test_pca, feat_X3D_test, feat_X3D_test_pca,  feat_pixel_test_pca)
write.csv(train2,"../output/features/Andrei/old/ccs.new_train_.csv",row.names = FALSE )
write.csv(test2,"../output/features/Andrei/old/ccs.new_test_.csv",row.names = FALSE )
head(train2)
hist(train2)
hist(train2$pca_rest_1)
hist(test2$pca_rest_1)
head(test2)
hist(train2$pca_rest_1)
hist(test2$pca_rest_1)
summary(test2$pca_rest_1)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_X3D_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_X3D_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~X3D features ")
ggplotly(p)
#Replace features by PCA components
feat_X3D_train_pca<-as.data.frame(pca$x[,1:10])
colnames(feat_X3D_test_pca)<-paste("pca_X3D_",1:10,sep="")
feat_X3D_test_pca<-as.data.frame(predict(pca, newdata=feat_X3D_test[,num.cols])[,1:10])
colnames(feat_X3D_test_pca)<-paste("pca_X3D_",1:10,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_rest_train, function(x) is.numeric(x) )))
svd_seq<-feat_rest_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_rest_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_rest_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~X3D features ")
ggplotly(p)
#Replace features by PCA components
feat_rest_train_pca<-as.data.frame(pca$x[,1:12])
colnames(feat_rest_train_pca)<-paste("pca_rest_",1:12,sep="")
feat_rest_test_pca<-as.data.frame(predict(pca, newdata=feat_rest_test[,num.cols])[,1:12])
colnames(feat_rest_train_pca)<-paste("pca_rest_",1:12,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
test_corr<-cbind(feat_X3D_train, feat_X3D_train_pca)
svd_seq<-feat_rest_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
train2<-cbind(train_index,feat_rest_train_pca, feat_X3D_train, feat_X3D_train_pca,  feat_pixel_train_pca)
test2<-cbind(test_index,feat_rest_test_pca, feat_X3D_test, feat_X3D_test_pca,  feat_pixel_test_pca)
write.csv(train2,"../output/features/Andrei/old/ccs.new_train_.csv",row.names = FALSE )
write.csv(test2,"../output/features/Andrei/old/ccs.new_test_.csv",row.names = FALSE )
hist(test2$pca_rest_1)
train2<-cbind(train_index,feat_rest_train_pca, feat_X3D_train, feat_X3D_train_pca,  feat_pixel_train_pca)
test2<-cbind(test_index,feat_rest_test_pca, feat_X3D_test, feat_X3D_test_pca,  feat_pixel_test_pca)
write.csv(train2,"../output/features/Andrei/old/ccs.new_train_.csv",row.names = FALSE )
write.csv(test2,"../output/features/Andrei/old/ccs.new_test_.csv",row.names = FALSE )
head(test2)
head(,feat_rest_test_pca)
head(feat_rest_test_pca)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_X3D_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_X3D_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~X3D features ")
ggplotly(p)
#Replace features by PCA components
feat_X3D_train_pca<-as.data.frame(pca$x[,1:10])
colnames(feat_X3D_train_pca)<-paste("pca_X3D_",1:10,sep="")
feat_X3D_test_pca<-as.data.frame(predict(pca, newdata=feat_X3D_test[,num.cols])[,1:10])
colnames(feat_X3D_test_pca)<-paste("pca_X3D_",1:10,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_rest_train, function(x) is.numeric(x) )))
svd_seq<-feat_rest_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_rest_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_rest_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~X3D features ")
ggplotly(p)
#Replace features by PCA components
feat_rest_train_pca<-as.data.frame(pca$x[,1:12])
colnames(feat_rest_train_pca)<-paste("pca_rest_",1:12,sep="")
feat_rest_test_pca<-as.data.frame(predict(pca, newdata=feat_rest_test[,num.cols])[,1:12])
colnames(feat_rest_test_pca)<-paste("pca_rest_",1:12,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
test_corr<-cbind(feat_X3D_train, feat_X3D_train_pca)
svd_seq<-feat_rest_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_X3D_train, function(x) is.numeric(x) )))
svd_seq<-feat_X3D_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_X3D_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_X3D_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~X3D features ")
ggplotly(p)
#Replace features by PCA components
feat_X3D_train_pca<-as.data.frame(pca$x[,1:10])
colnames(feat_X3D_train_pca)<-paste("pca_X3D_",1:10,sep="")
feat_X3D_test_pca<-as.data.frame(predict(pca, newdata=feat_X3D_test[,num.cols])[,1:10])
colnames(feat_X3D_test_pca)<-paste("pca_X3D_",1:10,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
####################################################################################################################
#Elegimos las componentes a utilizar
num.cols <- names(which(sapply(feat_rest_train, function(x) is.numeric(x) )))
svd_seq<-feat_rest_train[,num.cols ]
# Correlation scatter plots for all combinations between the first four principal components.
library(reshape2)
cormat <- round(cor(svd_seq),4)
melted_cormat <- melt(cormat)
head(melted_cormat)
p<-ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplotly(p)
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_rest_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_rest_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~X3D features ")
ggplotly(p)
#Replace features by PCA components
feat_rest_train_pca<-as.data.frame(pca$x[,1:12])
colnames(feat_rest_train_pca)<-paste("pca_rest_",1:12,sep="")
feat_rest_test_pca<-as.data.frame(predict(pca, newdata=feat_rest_test[,num.cols])[,1:12])
colnames(feat_rest_test_pca)<-paste("pca_rest_",1:12,sep="")
library(plotly)
pc<-as.data.frame(pca$x[,1:4])%>%
rename(Dim1=PC1,
Dim2=PC2,
Dim3=PC3,
Dim4=PC4)
p <- plot_ly(pc, x = ~Dim1, y = ~Dim2, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim2')))
p
p <- plot_ly(pc, x = ~Dim1, y = ~Dim3, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim3')))
p
p <- plot_ly(pc, x = ~Dim2, y = ~Dim4, color = ~as.factor(train_index$type_cat)) %>%
layout(scene = list(xaxis = list(title = 'Dim1'),
yaxis = list(title = 'Dim4')))
p
# conduct PCA on training dataset
num.cols <- names(which(sapply(feat_pixel_train, function(x) is.numeric(x) )))
pca <- prcomp(feat_pixel_train[,num.cols], retx=TRUE, center=FALSE, scale=FALSE)
#Eigenvalues
eig <- (pca$sdev)^2 ; variance <-eig*100/sum(eig) ; cumvar <- cumsum(variance) ; Comp<- 1:length(cumvar)
p<-as.data.frame(cbind(Comp,cumvar)) %>%
ggplot(aes(x =factor(Comp), y = cumvar)) +
geom_bar(stat = "identity")  + geom_hline(yintercept=95, col="red") +
xlab("components  ~pixel features ")
ggplotly(p)
